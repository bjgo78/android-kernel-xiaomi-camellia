name: Build Kernel

on:
  workflow_dispatch:
  schedule:
    - cron: '0 0 * * 6'
  push:
    branches:
      - '**'
  pull_request:
    branches:
      - '**'

jobs:
  build:
    runs-on: ubuntu-22.04

    env:
      CCACHE_COMPILERCHECK: "clang -dumpmachine; clang -dumpversion"
      CCACHE_NOHASHDIR: "true"
      CCACHE_MAXSIZE: "2G"
      CCACHE_HARDLINK: "true"
      KERNEL_DEFCONFIG: "camellia_defconfig"
      OUT_DIR: "out"

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: true
          fetch-depth: 100

      - name: Set up ccache
        uses: hendrikmuhs/ccache-action@v1.2

      - name: Install dependencies
        run: |
          sudo apt-get update -y
          sudo apt-get install -y \
            gcc make python3 libssl-dev build-essential bc bison flex unzip ca-certificates xz-utils mkbootimg cpio device-tree-compiler git git-lfs wget

      - name: Download and setup Linaro toolchain
        run: |
          LINUXARCHIVE="gcc-linaro-7.5.0-2019.12-x86_64_aarch64-linux-gnu.tar.xz"
          wget https://releases.linaro.org/components/toolchain/binaries/7.5-2019.12/aarch64-linux-gnu/${LINUXARCHIVE}
          tar -xf ${LINUXARCHIVE}
          echo "${PWD}/gcc-linaro-7.5.0-2019.12-x86_64_aarch64-linux-gnu/bin" >> $GITHUB_PATH

      - name: Clean kernel build output
        run: make O=${{ env.OUT_DIR }} mrproper

      - name: Get build time
        id: get_time
        run: echo "TIME=$(TZ=UTC-8 date +%m%d%H%M)" >> $GITHUB_OUTPUT

      - name: Build Kernel
        run: |
          export PATH=${PWD}/gcc-linaro-7.5.0-2019.12-x86_64_aarch64-linux-gnu/bin:$PATH
          export CC=clang
          export CLANG_TRIPLE=aarch64-linux-gnu-
          export CROSS_COMPILE=aarch64-linux-gnu-
          export CROSS_COMPILE_ARM32=arm-linux-gnueabi-
          export ARCH=arm64
          export SUBARCH=arm64

          make O=${{ env.OUT_DIR }} KCFLAGS=-w ARCH=arm64 CC="ccache clang" ${{ env.KERNEL_DEFCONFIG }}
          make O=${{ env.OUT_DIR }} KCFLAGS=-w ARCH=arm64 CC="ccache clang" -j$(nproc)

      - name: Package kernel with AnyKernel3
        run: |
          rm -rf AnyKernel3
          git clone --depth=1 -b master https://github.com/osm0sis/AnyKernel3 AnyKernel3
          rm -rf AnyKernel3/.git AnyKernel3/.github AnyKernel3/LICENSE AnyKernel3/README.md

          if [[ -f ${{ env.OUT_DIR }}/arch/arm64/boot/Image.gz-dtb ]]; then
            cp ${{ env.OUT_DIR }}/arch/arm64/boot/Image.gz-dtb AnyKernel3/Image.gz-dtb
          elif [[ -f ${{ env.OUT_DIR }}/arch/arm64/boot/Image-dtb ]]; then
            cp ${{ env.OUT_DIR }}/arch/arm64/boot/Image-dtb AnyKernel3/Image-dtb
          elif [[ -f ${{ env.OUT_DIR }}/arch/arm64/boot/Image.gz ]]; then
            cp ${{ env.OUT_DIR }}/arch/arm64/boot/Image.gz AnyKernel3/Image.gz
          elif [[ -f ${{ env.OUT_DIR }}/arch/arm64/boot/Image ]]; then
            cp ${{ env.OUT_DIR }}/arch/arm64/boot/Image AnyKernel3/Image
          else
            echo "No kernel image found!"
            exit 1
          fi

          if [[ -f ${{ env.OUT_DIR }}/arch/arm64/boot/dtbo.img ]]; then
            cp ${{ env.OUT_DIR }}/arch/arm64/boot/dtbo.img AnyKernel3/dtbo.img
          fi

          cd AnyKernel3
          zip -r ../kernel_package.zip .

      - name: Upload kernel artifact
        uses: actions/upload-artifact@v4
        with:
          name: kernel_package_${{ steps.get_time.outputs.TIME }}.zip
          path: kernel_package.zip
